// Find first instance
      // Extract centroids in order of x-coordinate
      Array.from(buckets.entries())
        .map(([_, particles]) => {
          return {
            centroid: calculateCentroid(particles),
            count: particles.length
          };
        })
        .filter(item => item.count >= 2) // Only use buckets with multiple particles
        .sort((a, b) => a.centroid.x - b.centroid.x) // Sort by x-coordinate
        
// Replace with
      // Extract and sort centroids by angle bucket
      Array.from(buckets.entries())
        .map(([angleBucket, particles]) => {
          return {
            angleBucket: Number(angleBucket), // Convert string key to number
            centroid: calculateCentroid(particles),
            count: particles.length
          };
        })
        .filter(item => item.count >= 2) // Only use buckets with multiple particles
        .sort((a, b) => a.angleBucket - b.angleBucket) // Sort by angle bucket first
        
// Find second instance
      // Extract centroids in order of x-coordinate
      Array.from(buckets.entries())
        .map(([_, particles]) => {
          return {
            centroid: calculateCentroid(particles),
            count: particles.length
          };
        })
        .filter(item => item.count >= 2) // Only use buckets with multiple particles
        .sort((a, b) => a.centroid.x - b.centroid.x) // Sort by x-coordinate
        
// Replace with
      // Extract and sort centroids by angle bucket
      Array.from(buckets.entries())
        .map(([angleBucket, particles]) => {
          return {
            angleBucket: Number(angleBucket), // Convert string key to number
            centroid: calculateCentroid(particles),
            count: particles.length
          };
        })
        .filter(item => item.count >= 2) // Only use buckets with multiple particles
        .sort((a, b) => a.angleBucket - b.angleBucket) // Sort by angle bucket first